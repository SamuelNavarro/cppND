\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+c1}{// Illustration of memory allocation and deallocation}
\PYG{k+kt}{int} \PYG{n+nf}{main}\PYG{p}{()} \PYG{p}{\PYGZob{}}
\PYG{k+kt}{int} \PYG{o}{*}\PYG{n}{ptr} \PYG{o}{=} \PYG{k}{nullptr}\PYG{p}{;}
\PYG{c+cm}{/*}
\PYG{c+cm}{When using new, best practice in coding states that we need}
\PYG{c+cm}{to enclose it within a try\PYGZhy{}catch block. The new operator throws}
\PYG{c+cm}{an exception and does not return a value. To force the new}
\PYG{c+cm}{operator to return a value, you canuse the nothrow}
\PYG{c+cm}{qualifier as shown below:}
\PYG{c+cm}{*/}
\PYG{n}{ptr} \PYG{o}{=} \PYG{k}{new}\PYG{p}{(}\PYG{n}{std}\PYG{o}{::}\PYG{n}{nothrow}\PYG{p}{)} \PYG{k+kt}{int}\PYG{p}{;}
\PYG{k}{if} \PYG{p}{(}\PYG{o}{!}\PYG{n}{ptr}\PYG{p}{)} \PYG{p}{\PYGZob{}}
 \PYG{n}{std}\PYG{o}{::}\PYG{n}{cout} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{l+s}{\PYGZdq{}Mem alloc failed!\PYGZdq{}} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{std}\PYG{o}{::}\PYG{n}{endl}\PYG{p}{;}
\PYG{p}{\PYGZcb{}}
\PYG{k}{else} \PYG{p}{\PYGZob{}}
    \PYG{c+c1}{// assigning value to newly allocated address}
    \PYG{o}{*}\PYG{n}{ptr} \PYG{o}{=} \PYG{l+m+mi}{31}\PYG{p}{;}
    \PYG{c+c1}{// checking our pointer state:}
    \PYG{n}{std}\PYG{o}{::}\PYG{n}{cout}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+s}{\PYGZdq{} Address is: \PYGZdq{}} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{ptr} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{std}\PYG{o}{::}\PYG{n}{endl}\PYG{p}{;}
    \PYG{n}{std}\PYG{o}{::}\PYG{n}{cout}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+s}{\PYGZdq{} Value is: \PYGZdq{}} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{o}{*}\PYG{n}{ptr} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{std}\PYG{o}{::}\PYG{n}{endl}\PYG{p}{;}
\PYG{p}{\PYGZcb{}}

\PYG{c+c1}{// We are creating pointer to array of integers}
\PYG{k+kt}{int} \PYG{o}{*}\PYG{n}{arr\PYGZus{}ptr} \PYG{o}{=} \PYG{k}{new}\PYG{p}{(}\PYG{n}{std}\PYG{o}{::}\PYG{n}{nothrow}\PYG{p}{)} \PYG{k+kt}{int}\PYG{p}{[}\PYG{l+m+mi}{3}\PYG{p}{];}
\PYG{c+c1}{// We are storing new values to created array}
\PYG{c+c1}{// 0 1 4}
\PYG{k}{for} \PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{l+m+mi}{0}\PYG{p}{;} \PYG{n}{i}\PYG{o}{\PYGZlt{}}\PYG{l+m+mi}{3}\PYG{p}{;} \PYG{n}{i}\PYG{o}{++}\PYG{p}{)}
    \PYG{n}{arr\PYGZus{}ptr}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]} \PYG{o}{=} \PYG{p}{(}\PYG{n}{i}\PYG{o}{*}\PYG{n}{i}\PYG{p}{);}

\PYG{c+c1}{// Writing our arr\PYGZus{}ptr pointer info:}
\PYG{k}{for} \PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{l+m+mi}{0}\PYG{p}{;} \PYG{n}{i}\PYG{o}{\PYGZlt{}}\PYG{l+m+mi}{3}\PYG{p}{;} \PYG{n}{i}\PYG{o}{++}\PYG{p}{)} \PYG{p}{\PYGZob{}}
    \PYG{c+c1}{// notice notation for retrieval of memory address}
    \PYG{c+c1}{// in array pointers ( we are using references)}
    \PYG{n}{std}\PYG{o}{::}\PYG{n}{cout}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+s}{\PYGZdq{} Address is: \PYGZdq{}} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{o}{\PYGZam{}}\PYG{n}{arr\PYGZus{}ptr}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{std}\PYG{o}{::}\PYG{n}{endl}\PYG{p}{;}
    \PYG{n}{std}\PYG{o}{::}\PYG{n}{cout}\PYG{o}{\PYGZlt{}\PYGZlt{}}\PYG{l+s}{\PYGZdq{} Value is: \PYGZdq{}} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{arr\PYGZus{}ptr}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{n}{std}\PYG{o}{::}\PYG{n}{endl}\PYG{p}{;}
\PYG{p}{\PYGZcb{}}

\PYG{c+c1}{// Before our program is finished, we have responsibility}
\PYG{c+c1}{// to deallocate all of our allocated memory:}

\PYG{c+c1}{// integer pointer}
\PYG{k}{delete} \PYG{n}{ptr}\PYG{p}{;}
\PYG{c+c1}{// array of integers pointer \PYGZhy{} block of memory}
\PYG{k}{delete}\PYG{p}{[]} \PYG{n}{arr\PYGZus{}ptr}\PYG{p}{;}

\PYG{k}{return} \PYG{l+m+mi}{0}\PYG{p}{;}
\PYG{p}{\PYGZcb{}}
\end{Verbatim}
